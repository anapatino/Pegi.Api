// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(PegiDbContext))]
    [Migration("20230728032734_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.AcademicProgram", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code_program");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Code");

                    b.ToTable("academics_program");
                });

            modelBuilder.Entity("Entities.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("city_id");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentCode");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Entities.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("deparment_name");

                    b.HasKey("Id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Entities.Experience", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("experience_code");

                    b.Property<string>("CitiesCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("study_end_date");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("experience_institution");

                    b.Property<string>("PeopleCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("experience_position");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("study_start_date");

                    b.HasKey("Code");

                    b.HasIndex("CitiesCode");

                    b.HasIndex("PeopleCode");

                    b.ToTable("experiences");
                });

            modelBuilder.Entity("Entities.HistoryProject", b =>
                {
                    b.Property<int?>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Code"));

                    b.Property<string>("ProjectCode")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectFeedBackCode")
                        .HasColumnType("integer");

                    b.HasKey("Code");

                    b.HasIndex("ProjectCode");

                    b.HasIndex("ProjectFeedBackCode");

                    b.ToTable("history_projects");
                });

            modelBuilder.Entity("Entities.HistoryProposals", b =>
                {
                    b.Property<int?>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Code"));

                    b.Property<int?>("PorposalFeedBackCode")
                        .HasColumnType("integer");

                    b.Property<string>("ProposalCode")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("PorposalFeedBackCode");

                    b.HasIndex("ProposalCode");

                    b.ToTable("history_proposals");
                });

            modelBuilder.Entity("Entities.Message", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PersonDocument")
                        .HasColumnType("text")
                        .HasColumnName("personDocument");

                    b.HasKey("Code");

                    b.ToTable("message");
                });

            modelBuilder.Entity("Entities.Person", b =>
                {
                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("person_birth_date");

                    b.Property<string>("CitiesCode")
                        .HasColumnType("text");

                    b.Property<string>("CivilState")
                        .HasColumnType("text")
                        .HasColumnName("person_civil_state");

                    b.Property<string>("FirstLastName")
                        .HasColumnType("text")
                        .HasColumnName("person_first_last_name");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("person_first_name");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("person_gender");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("person_identification_type");

                    b.Property<string>("InstitutionalMail")
                        .HasColumnType("text")
                        .HasColumnName("person_institutional_email");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("person_phone");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("text")
                        .HasColumnName("person_second_last_name");

                    b.Property<string>("SecondName")
                        .HasColumnType("text")
                        .HasColumnName("person_second_name");

                    b.HasKey("Document");

                    b.HasIndex("CitiesCode");

                    b.ToTable("people");
                });

            modelBuilder.Entity("Entities.Professor", b =>
                {
                    b.Property<string>("Document")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.HasKey("Document");

                    b.ToTable("professor");
                });

            modelBuilder.Entity("Entities.Project", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea")
                        .HasColumnName("Content");

                    b.Property<string>("EvaluatorDocument")
                        .HasColumnType("text");

                    b.Property<string>("PersonDocument1")
                        .HasColumnType("text");

                    b.Property<string>("PersonDocument2")
                        .HasColumnType("text");

                    b.Property<string>("ProposalCode")
                        .HasColumnType("text");

                    b.Property<int?>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("Score");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.Property<string>("TutorDocument")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("EvaluatorDocument");

                    b.HasIndex("PersonDocument1");

                    b.HasIndex("PersonDocument2");

                    b.HasIndex("ProposalCode");

                    b.HasIndex("TutorDocument");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("Entities.ProjectFeedBack", b =>
                {
                    b.Property<int?>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Code"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("Score");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Code");

                    b.ToTable("project_feedbacks");
                });

            modelBuilder.Entity("Entities.Proposal", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Approach")
                        .HasColumnType("text")
                        .HasColumnName("approach");

                    b.Property<string>("Bibliographical")
                        .HasColumnType("text")
                        .HasColumnName("biblioGraphical");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("EvaluatorDocument")
                        .HasColumnType("text");

                    b.Property<string>("GeneralObjective")
                        .HasColumnType("text")
                        .HasColumnName("generalObjective");

                    b.Property<string>("InvestigationGroup")
                        .HasColumnType("text");

                    b.Property<string>("Justification")
                        .HasColumnType("text")
                        .HasColumnName("justification");

                    b.Property<string>("PersonDocument1")
                        .HasColumnType("text");

                    b.Property<string>("PersonDocument2")
                        .HasColumnType("text");

                    b.Property<string>("SpecificObjective")
                        .HasColumnType("text")
                        .HasColumnName("specificObjective");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("ThematicAreaCode")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("TutorDocument")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("EvaluatorDocument");

                    b.HasIndex("InvestigationGroup");

                    b.HasIndex("PersonDocument1");

                    b.HasIndex("PersonDocument2");

                    b.HasIndex("ThematicAreaCode");

                    b.HasIndex("TutorDocument");

                    b.ToTable("proposals");
                });

            modelBuilder.Entity("Entities.ProposalFeedBack", b =>
                {
                    b.Property<int?>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Code"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Code");

                    b.ToTable("porposal_feedback");
                });

            modelBuilder.Entity("Entities.ResearchGroup", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Objetive")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("objetive");

                    b.Property<string>("ResearchLineCode")
                        .HasColumnType("text");

                    b.Property<string>("TeachersAndscribed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("teachers_andscribed");

                    b.HasKey("Code");

                    b.HasIndex("ResearchLineCode");

                    b.ToTable("research_group");
                });

            modelBuilder.Entity("Entities.ResearchLine", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Code");

                    b.ToTable("research_lines");
                });

            modelBuilder.Entity("Entities.ResearchSubline", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ResearchLineCode")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("ResearchLineCode");

                    b.ToTable("research_sublines");
                });

            modelBuilder.Entity("Entities.Student", b =>
                {
                    b.Property<string>("Document")
                        .HasColumnType("text");

                    b.Property<string>("AcademicProgramCode")
                        .HasColumnType("text");

                    b.Property<string>("AmountCredits")
                        .HasColumnType("text")
                        .HasColumnName("amount_credits");

                    b.HasKey("Document");

                    b.HasIndex("AcademicProgramCode");

                    b.ToTable("students");
                });

            modelBuilder.Entity("Entities.Study", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("study_code");

                    b.Property<string>("CitiesCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("study_end_date");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("study_institution");

                    b.Property<string>("PeopleCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("study_start_date");

                    b.HasKey("Code");

                    b.HasIndex("CitiesCode");

                    b.HasIndex("PeopleCode");

                    b.ToTable("studies");
                });

            modelBuilder.Entity("Entities.ThematicArea", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ResearchSublineCode")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.HasIndex("ResearchSublineCode");

                    b.ToTable("thematic_areas");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("user_password");

                    b.Property<string>("PersonDocument")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("user_rol");

                    b.HasKey("Name");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PersonDocument");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Entities.City", b =>
                {
                    b.HasOne("Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Entities.Experience", b =>
                {
                    b.HasOne("Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CitiesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PeopleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.HistoryProject", b =>
                {
                    b.HasOne("Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectCode");

                    b.HasOne("Entities.ProjectFeedBack", "ProjectFeedBack")
                        .WithMany()
                        .HasForeignKey("ProjectFeedBackCode");

                    b.Navigation("Project");

                    b.Navigation("ProjectFeedBack");
                });

            modelBuilder.Entity("Entities.HistoryProposals", b =>
                {
                    b.HasOne("Entities.ProposalFeedBack", "ProposalFeedBack")
                        .WithMany()
                        .HasForeignKey("PorposalFeedBackCode");

                    b.HasOne("Entities.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalCode");

                    b.Navigation("Proposal");

                    b.Navigation("ProposalFeedBack");
                });

            modelBuilder.Entity("Entities.Person", b =>
                {
                    b.HasOne("Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CitiesCode");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entities.Professor", b =>
                {
                    b.HasOne("Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Document")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.Project", b =>
                {
                    b.HasOne("Entities.Professor", "Professor1")
                        .WithMany()
                        .HasForeignKey("EvaluatorDocument");

                    b.HasOne("Entities.Student", "Student1")
                        .WithMany()
                        .HasForeignKey("PersonDocument1");

                    b.HasOne("Entities.Student", "Student2")
                        .WithMany()
                        .HasForeignKey("PersonDocument2");

                    b.HasOne("Entities.Proposal", "Proposal")
                        .WithMany()
                        .HasForeignKey("ProposalCode");

                    b.HasOne("Entities.Professor", "Professor2")
                        .WithMany()
                        .HasForeignKey("TutorDocument");

                    b.Navigation("Professor1");

                    b.Navigation("Professor2");

                    b.Navigation("Proposal");

                    b.Navigation("Student1");

                    b.Navigation("Student2");
                });

            modelBuilder.Entity("Entities.Proposal", b =>
                {
                    b.HasOne("Entities.Professor", "Professor1")
                        .WithMany()
                        .HasForeignKey("EvaluatorDocument");

                    b.HasOne("Entities.ResearchGroup", "ResearchGroup")
                        .WithMany()
                        .HasForeignKey("InvestigationGroup");

                    b.HasOne("Entities.Student", "Student1")
                        .WithMany()
                        .HasForeignKey("PersonDocument1");

                    b.HasOne("Entities.Student", "Student2")
                        .WithMany()
                        .HasForeignKey("PersonDocument2");

                    b.HasOne("Entities.ThematicArea", "ThematicArea")
                        .WithMany()
                        .HasForeignKey("ThematicAreaCode");

                    b.HasOne("Entities.Professor", "Professor2")
                        .WithMany()
                        .HasForeignKey("TutorDocument");

                    b.Navigation("Professor1");

                    b.Navigation("Professor2");

                    b.Navigation("ResearchGroup");

                    b.Navigation("Student1");

                    b.Navigation("Student2");

                    b.Navigation("ThematicArea");
                });

            modelBuilder.Entity("Entities.ResearchGroup", b =>
                {
                    b.HasOne("Entities.ResearchLine", "ResearchLine")
                        .WithMany()
                        .HasForeignKey("ResearchLineCode");

                    b.Navigation("ResearchLine");
                });

            modelBuilder.Entity("Entities.ResearchSubline", b =>
                {
                    b.HasOne("Entities.ResearchLine", "ResearchLine")
                        .WithMany()
                        .HasForeignKey("ResearchLineCode");

                    b.Navigation("ResearchLine");
                });

            modelBuilder.Entity("Entities.Student", b =>
                {
                    b.HasOne("Entities.AcademicProgram", "AcademicProgram")
                        .WithMany()
                        .HasForeignKey("AcademicProgramCode");

                    b.HasOne("Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Document")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicProgram");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.Study", b =>
                {
                    b.HasOne("Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CitiesCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PeopleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.ThematicArea", b =>
                {
                    b.HasOne("Entities.ResearchSubline", "ResearchSubline")
                        .WithMany()
                        .HasForeignKey("ResearchSublineCode");

                    b.Navigation("ResearchSubline");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonDocument");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
